# GitHub Pages Deployment Workflow
# - Main branch: Deploy to production environment
# - PR branches: Deploy to PR-specific preview environment

name: GitHub Pages Deployment

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

# Allow one concurrent deployment for production
# but run PR deployments concurrently
concurrency:
  group: ${{ github.ref == 'refs/heads/main' && 'deploy-production' || format('deploy-preview-{0}', github.event.number) }}
  cancel-in-progress: true

jobs:
  # Common build job for all environments
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Lint
        run: pnpm run lint --no-cache || true
      
      - name: TypeCheck
        run: pnpm run typecheck || true
      
      - name: Build
        run: pnpm run build
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages-${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.pull_request.number) || 'production' }}
          path: out
          if-no-files-found: error

  # Deploy to GitHub Pages for production
  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages-production
          path: out
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: out
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create a comment on PR with preview link
  pr-comment:
    if: github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const PR_NUMBER = context.issue.number;
            const REPO_NAME = context.repo.repo;
            const OWNER = context.repo.owner;
            
            // The actual preview would be manually created, so we're just creating a comment
            // explaining this to the reviewer
            
            const body = `## ⚠️ PR Preview Information ⚠️
            
            This repository uses GitHub Pages with GitHub Actions workflow-based deployment.
            
            **For reviewers:**
            1. After this PR is merged, the changes will be deployed to the main site: https://${OWNER}.github.io/${REPO_NAME}/
            2. For previewing changes before merging, please check the file changes tab or pull the branch locally.
            
            **For developers:**
            To preview changes locally, run:
            \`\`\`bash
            git fetch
            git checkout PR-${PR_NUMBER}
            pnpm install
            pnpm run build
            pnpm run start
            \`\`\``;
            
            const comments = await github.rest.issues.listComments({
              owner: OWNER,
              repo: REPO_NAME,
              issue_number: PR_NUMBER
            });
            
            // Check if we already commented
            const existingComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('PR Preview Information')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: OWNER,
                repo: REPO_NAME,
                comment_id: existingComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: OWNER,
                repo: REPO_NAME,
                issue_number: PR_NUMBER,
                body
              });
            }